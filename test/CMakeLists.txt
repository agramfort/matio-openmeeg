IF(NOT WIN32)
    SET(MATIO_EXTERNAL_LIBRARIES m) 
ENDIF()

ADD_EXECUTABLE(test_mat test_mat.c)
TARGET_LINK_LIBRARIES(test_mat matio ${MATIO_EXTERNAL_LIBRARIES} ${GETOPT_LIB})

ADD_EXECUTABLE(test_snprintf test_snprintf.c ${MATIO_SOURCE_DIR}/src/snprintf.c)
TARGET_LINK_LIBRARIES(test_snprintf ${MATIO_EXTERNAL_LIBRARIES} ${GETOPT_LIB})

OPTION(MATLAB_TESTING "Enable matlab read tests (requires a function matlab)" ON)
IF (MATLAB_TESTING)
    FIND_PROGRAM(MATLAB matlab)
ELSE()
    SET(MATLAB FALSE)
ENDIF()

MACRO(PARSE_TEST_ARGUMENTS LIST_VARS DEFAULT_VAR)
    unset(${DEFAULT_VAR})
    foreach(var ${LIST_VARS})
        unset(${var})
    endforeach ()

    set(CURRENT_VAR ${DEFAULT_VAR})
    foreach (arg ${ARGN})
        set(skip_this_arg FALSE)
        foreach(var ${LIST_VARS})
            if (${arg} STREQUAL ${var})
                set(CURRENT_VAR ${var})
                set(skip_this_arg TRUE)
                BREAK()
            endif()
        endforeach ()
        if (NOT skip_this_arg)
            set(${CURRENT_VAR} ${${CURRENT_VAR}} ${arg})
        endif()
    endforeach ()
ENDMACRO()

MACRO(SET_TEST_DIR TEST_DIR)
    IF (WIN32)
        IF (NOT CMAKE_BUILD_TYPE)
            SET(CMAKE_BUILD_TYPE Debug)
        ENDIF()
        SET(${TEST_DIR} ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE})
    ELSE()
        SET(${TEST_DIR} ${CMAKE_CURRENT_BINARY_DIR})
    ENDIF()
ENDMACRO()

MACRO(MATIO_TEST_READ NAME REFERENCE PROG_NAME)
    PARSE_TEST_ARGUMENTS("DEPENDS" "DEFAULT" ${ARGN})
    SET(PROG_ARGS "${DEFAULT}")
    SEPARATE_ARGUMENTS(ARGS UNIX_COMMAND "${PROG_ARGS}")
    SET_TEST_DIR(TEST_DIR)
    SET(EXECUTABLE ${TEST_DIR}/${PROG_NAME}${CMAKE_EXECUTABLE_SUFFIX})
    SET(OUTPUT ${NAME}.out)
    ADD_TEST(${NAME} ${EXECUTABLE} ${PROG_ARGS} -o ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT}) # To perform memcheck tests
    IF (DEPENDS)
        SET_TESTS_PROPERTIES(${NAME} PROPERTIES DEPENDS "${DEPENDS}")
    ENDIF()
    ADD_TEST(${NAME}-COMPARISON
             ${CMAKE_COMMAND} -D TEST_DIR:STRING=${TEST_DIR}
                              -D TEST_OUTPUT:STRING=${OUTPUT}
                              -D TEST_REFERENCE_DIR:STRING=${MATIO_SOURCE_DIR}/test/datasets/results
                              -D TEST_RESULT:STRING=${REFERENCE}
                              -P ${MATIO_SOURCE_DIR}/test/runTest.cmake) # To compare output to reference file
    #SET_TESTS_PROPERTIES(${NAME} PROPERTIES DEPENDS ${EXECUTABLE})

    #  Add a dependency to the MATIO-matlab test so that COMPARISON tests are run after matlab ones (so they do not
    #  cleanup the files too early).

    IF (MATLAB)
        STRING(REPLACE "MATIO-" "MATIO-matlab" MATDEPENDS ${NAME})
        SET_TESTS_PROPERTIES(${NAME}-COMPARISON PROPERTIES DEPENDS ${MATDEPENDS})
    ENDIF()
    SET_TESTS_PROPERTIES(${NAME}-COMPARISON PROPERTIES
                         DEPENDS ${NAME}
                         PASS_REGULAR_EXPRESSION "Success")
ENDMACRO()

SET(MATIO_FILES)
MACRO(MATIO_TEST_WRITE NAME FILENAME PROG_NAME)
    PARSE_TEST_ARGUMENTS("DEPENDS" "DEFAULT" ${ARGN})
    SET(PROG_ARGS "${DEFAULT}")
    SEPARATE_ARGUMENTS(ARGS UNIX_COMMAND "${PROG_ARGS}")
    SET_TEST_DIR(TEST_DIR)
    SET(EXECUTABLE ${TEST_DIR}/${PROG_NAME}${CMAKE_EXECUTABLE_SUFFIX})
    SET(MATIO_FILES ${MATIO_FILES} ${FILENAME} PARENT_SCOPE)
    ADD_TEST(${NAME} ${EXECUTABLE} ${PROG_ARGS} -o ${CMAKE_CURRENT_BINARY_DIR}/${FILENAME}) # To perform memcheck tests
ENDMACRO()

MACRO(MATIO_TEST_MATLAB_READ NAME FILE TEST_TYPE CLASS)
    IF (MATLAB)
        PARSE_TEST_ARGUMENTS("DEPENDS" "DEFAULT" ${ARGN})
        SET_TEST_DIR(TEST_DIR)
        STRING(REPLACE "-" "_" MSBNAME ${FILE})
        STRING(REPLACE ".mat" "" MSBNAME ${MSBNAME})
        STRING(REPLACE "." "_" MSBNAME ${MSBNAME})
        SET(FILENAME ${TEST_DIR}/${FILE})
        SET(TYPE ${CLASS})
        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/matlab_${TEST_TYPE}.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/matlab/${MSBNAME}.m @ONLY)
        ADD_TEST(NAME ${NAME} WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/matlab COMMAND ${MATLAB} -nosplash -nojvm -r "${MSBNAME};exit")
        IF (DEPENDS)
            SET_TESTS_PROPERTIES(${NAME} PROPERTIES DEPENDS ${DEPENDS})
        ENDIF()
        SET_TESTS_PROPERTIES(${NAME} PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")
    ENDIF()
ENDMACRO()

#MATIO_TEST(TEST_SNPRINTF test_snprintf)

SET(v4_vars var1 var11 var24)
SET(vars)
FOREACH(i RANGE 1 69)
    SET(vars ${vars} "var${i}")
ENDFOREACH()
SET(compressed_vars ${vars})
SET(uncompressed_vars ${vars})
SET(hdf_vars ${vars})
SET(special_vars var23 var27 var52 var66)

FOREACH(vers v4 compressed uncompressed hdf)
    FOREACH(endian le be)
        FOREACH(var ${${vers}_vars})
            SET(MODIFIER)
            IF (${vers} STREQUAL hdf)
                LIST(FIND special_vars ${var} special)
                IF (NOT ${special} EQUAL -1)
                    SET(MODIFIER -hdf)
                ENDIF()
            ENDIF()
            SET(testname read-${vers}-${endian}-${var})
            SET(input ${CMAKE_CURRENT_SOURCE_DIR}/datasets/matio_test_cases_${vers}_${endian}.mat)
            SET(reference read-${var}${MODIFIER}.out)
            MATIO_TEST_READ(MATIO-${testname} ${reference} test_mat readvar ${input} ${var})
        ENDFOREACH()
    ENDFOREACH()
ENDFOREACH()
    
SET(MATIO_WRITE_TESTS_NUMERIC 
     write_2d_numeric write_complex_2d_numeric write_struct_2d_numeric
     write_struct_complex_2d_numeric write_cell_2d_numeric write_cell_complex_2d_numeric)

SET(VERSIONS 5)
IF (MAT73)
    SET(VERSIONS ${VERSIONS} 7.3)
ENDIF()

SET(write_char_vars             a)
SET(write_empty_2d_numeric_vars empty)
SET(write_empty_struct_vars     var1 var2 var3 var4)
SET(write_empty_cell_vars       var1 var2)
SET(write_sparse_vars           sparse_matrix)
SET(write_complex_sparse_vars   sparse_matrix)
SET(writeinf_vars               d)
SET(writenan_vars               d)
SET(writenull_vars              d_null cd_null char_null struct_null struct_empty_with_fields struct_null_fields cell_null cell_null_cells)
SET(writeslab_vars              d f i)

SET(MATIO_EMPTY_TESTS  write_empty_2d_numeric write_empty_struct write_empty_cell)
SET(MATIO_SPARSE_TESTS write_sparse write_complex_sparse)
#SET(MATIO_OTHER_TESTS writeinf writenan writenull writeslab)
#   Invalidate writeslab tests which fail with segfault and cannot be xfailed.
SET(MATIO_OTHER_TESTS writeinf writenan writenull)
FOREACH (version ${VERSIONS})
    FOREACH(type write_char ${MATIO_SPARSE_TESTS} ${MATIO_EMPTY_TESTS} ${MATIO_OTHER_TESTS})
        SET(testname ${type}-${version})
        SET(filename test_${testname}.mat)
        SET(MODIFIER)
        IF (${type} STREQUAL "write_empty_2d_numeric" OR
            ${type} STREQUAL "write_empty_struct" OR
            ${type} STREQUAL "write_empty_cell" OR
            ${type} STREQUAL "writenull")
            SET(MODIFIER "-${version}")
        ENDIF()
        MATIO_TEST_WRITE(MATIO-${testname} ${filename} test_mat -v ${version} ${type})
        MATIO_TEST_MATLAB_READ(MATIO-matlab-${testname} ${filename} ${type} ${class} DEPENDS MATIO-${testname})
        FOREACH (var ${${type}_vars})
            SET(reference readvar-${type}${MODIFIER}-${var}.out)
            MATIO_TEST_READ(MATIO-readvar-${testname}-${var} ${reference} test_mat readvar ${filename} ${var} DEPENDS MATIO-${testname})
        ENDFOREACH()
        IF (${version} STREQUAL "5")
            SET(testname ${testname}-compressed)
            SET(filename test_${testname}.mat)
            MATIO_TEST_WRITE(MATIO-${testname} ${filename} test_mat -v ${version} -z ${type} -o ${filename})
            MATIO_TEST_MATLAB_READ(MATIO-matlab-${testname} ${filename} ${type} NONE DEPENDS MATIO-${testname})
            FOREACH (var ${${type}_vars})
                IF ((${type} STREQUAL "write_empty_cell" AND ${var} STREQUAL "var2") OR
                    (${type} STREQUAL "writenull" AND ${var} STREQUAL "cell_null_cells"))
                    SET(MODIFIER "${MODIFIER}-compressed")
                ENDIF()
                SET(reference readvar-${type}${MODIFIER}-${var}.out)
                MATIO_TEST_READ(MATIO-readvar-${testname}-${var} ${reference} test_mat readvar ${filename} ${var} DEPENDS MATIO-${testname})
            ENDFOREACH()
        ENDIF() 
    ENDFOREACH()
    FOREACH(type ${MATIO_WRITE_TESTS_NUMERIC})
        FOREACH(class double single int64 uint64 int32 uint32 int16 uint16 int8 uint8)
            SET(testname ${type}-${class}-${version})
            SET(filename test_${testname}.mat)
            MATIO_TEST_WRITE(MATIO-${testname} ${filename} test_mat -c ${class} -v ${version} ${type})
            SET(reference ${type}-${class}.out)
            MATIO_TEST_MATLAB_READ(MATIO-matlab-${testname} ${filename} ${type} ${class} DEPENDS MATIO-${testname})
            MATIO_TEST_READ(MATIO-readvar-${testname} ${reference} test_mat readvar ${filename} a DEPENDS MATIO-${testname})
            IF (${version} STREQUAL "5")
                SET(testname ${testname}-compressed)
                SET(filename test_${testname}.mat)
                MATIO_TEST_WRITE(MATIO-${testname} ${filename} test_mat -c ${class} -v ${version} -z ${type} -o ${filename})
                MATIO_TEST_MATLAB_READ(MATIO-matlab-${testname} ${filename} ${type} ${class} DEPENDS MATIO-${testname})
                MATIO_TEST_READ(MATIO-readvar-${testname} ${reference} test_mat readvar ${filename} a DEPENDS MATIO-${testname})
            ENDIF() 
        ENDFOREACH()
    ENDFOREACH()
ENDFOREACH()

# See comment on writeslab above.
#SET_TESTS_PROPERTIES(
#    MATIO-readvar-writeslab-7.3-i-COMPARISON
#    MATIO-readvar-writeslab-7.3-f-COMPARISON MATIO-readvar-writeslab-7.3-d-COMPARISON
#    MATIO-readvar-writenan-5-d-COMPARISON MATIO-readvar-writenan-5-compressed-d-COMPARISON MATIO-readvar-writenan-7.3-d-COMPARISON
#    PROPERTIES WILL_FAIL TRUE)
    
SET_TESTS_PROPERTIES(
    MATIO-readvar-writenan-5-d-COMPARISON MATIO-readvar-writenan-5-compressed-d-COMPARISON MATIO-readvar-writenan-7.3-d-COMPARISON
    PROPERTIES WILL_FAIL TRUE)
    
# See comment on writeslab above.
#IF (MATLAB)
#    SET_TESTS_PROPERTIES( MATIO-matlab-writeslab-7.3 PROPERTIES WILL_FAIL TRUE)
#ENDIF()

SET(MATIO_CELL_TESTS   cell_api_set cell_api_getlinear cell_api_getcells)
SET(MATIO_STRUCT_TESTS struct_api_create struct_api_setfield struct_api_getfieldnames struct_api_addfield struct_api_getlinear struct_api_get)
FOREACH(type ${MATIO_CELL_TESTS} ${MATIO_STRUCT_TESTS})
    SET(reference test_${type}.out)
    MATIO_TEST_READ(MATIO-${type} ${reference} test_mat ${type})
ENDFOREACH()

#FOREACH(arg ${MATIO_OTHER_FILES})
#    SET(testname ${arg})
#    SET(filename test_${testname}.mat)
#    IF (${arg} STREQUAL "writenull")
#        SET(filename test_write_null.mat)
#    ENDIF()
#    SET(MATIO_FILES ${MATIO_FILES} ${filename})
##    MATIO_TEST(MATIO-${testname} ${filename} Null.out test_mat ${arg})
#ENDFOREACH()

SET(MATIO_IND_TESTS ind2sub sub2ind)
FOREACH(arg ${MATIO_IND_TESTS})
    SET(TEST_REFERENCE MATIO-${arg}.out)
    MATIO_TEST_READ(MATIO-${arg} ${TEST_REFERENCE} test_mat ${arg})
ENDFOREACH()

#SET(DATASETS d f i64 ui64 i32 i16 i8 str)
#FOREACH(file ${MATIO_FILES})
#    MATIO_TEST(MATIO-copy-${file} copy_${file} Copy.out test_mat copy ${file} -o copy_${file})
#    FOREACH (var ${DATASETS})
#        ADD_TEST(MATIO-delete-${file} test_mat delete ${file} ${var})
#    ENDFOREACH()
#ENDFOREACH()

#SET(MATIO_WRITESLAB_VARS d f i)
#FOREACH(var ${MATIO_WRITESLAB_VARS})
#    MATIO_TEST(MATIO-readslab-${var} "" test_readslab_${var}.out test_mat readslab test_mat_writeslab.mat ${var})
#ENDFOREACH()

#FOREACH(arg write_struct_2d_numeric write_struct_complex_2d_numeric)
#    SET(VERSIONS 4 5)
#    IF (MAT73)
#        SET(VERSIONS ${VERSIONS} 7.3)
#    ENDIF()
#    FOREACH(field 1 2)
#        FOREACH(class double single int64 uint64 int32 uint32 int16 uint16 int8 uint8)
#            FOREACH (version ${VERSIONS})
#                SET(testname ${arg}-${class}-${version})
#                SET(filename test_${testname}.mat)
#                SET(testname getstructfield-${testname})
#                MATIO_TEST(MATIO-${testname} "" ${testname}.out test_mat getstructfield ${filename} a field${field})
#                IF (${version} STREQUAL "5")
#                    SET(testname ${arg}-${class}-${version}-compressed)
#                    SET(filename test_${testname}.mat)
#                    SET(testname getstructfield-${testname})
#                    MATIO_TEST(MATIO-${testname} "" ${testname}.out test_mat getstructfield ${filename} a field${field})
#                ENDIF() 
#            ENDFOREACH()
#        ENDFOREACH()
#    ENDFOREACH()
#ENDFOREACH()

# Add more tests for these.

SET(MATIO_READ_TESTS readvar4 readslab4 slab3)

# Set tests that are expected to fail (TO BE CORRECTED).

IF (ENABLE_FORTRAN)
    INCLUDE_DIRECTORIES(${MATIO_SOURCE_DIR}/src/fortran ${MATIO_BINARY_DIR}/src/fortran)
    ADD_EXECUTABLE(test_matf test_matf.f90)
    TARGET_LINK_LIBRARIES(test_matf fmatio matio m)
    # TESTS
ENDIF()
