From 0d3bc1714c396b632597a37107f3126238670c54 Mon Sep 17 00:00:00 2001
From: Theo Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>
Date: Fri, 20 Aug 2010 18:49:59 +0200
Subject: [PATCH 2/4] Remove compilation warnings + some infrastructure for cmake.

---
 src/inflate.c        |    1 +
 src/io.c             |    4 +-
 src/mat.c            |   57 +++++++-------
 src/mat4.c           |    1 +
 src/mat5.c           |  210 ++++++++++++++++++++++++--------------------------
 src/matio.h          |  125 +++++++++++++++---------------
 src/matio_private.h  |   15 ++++-
 src/read_data.c      |    9 +--
 src/snprintf.c       |   10 ++-
 test/test_mat.c      |   33 ++++----
 test/test_snprintf.c |   10 ++-
 11 files changed, 246 insertions(+), 229 deletions(-)

diff --git a/src/inflate.c b/src/inflate.c
index f6b1b72..111657d 100644
--- a/src/inflate.c
+++ b/src/inflate.c
@@ -20,6 +20,7 @@
  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 #include <stdlib.h>
+#define MATIO_INTERNAL
 #include "matio.h"
 #include "matio_private.h"
 
diff --git a/src/io.c b/src/io.c
index 9466270..1a668e7 100644
--- a/src/io.c
+++ b/src/io.c
@@ -23,7 +23,9 @@
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
+#define MATIO_INTERNAL
 #include <matio.h>
+#include <matio_private.h>
 
 #if !defined(HAVE_VA_COPY) && defined(HAVE___VA_COPY)
 #    define va_copy(d,s) __va_copy(d,s)
@@ -354,7 +356,7 @@ Mat_LogClose( void )
  * @return 0 on success
  */
 int
-Mat_LogInit( const char *prog_name )
+Mat_LogInit( const char* UNUSED(prog_name) )
 {
     logfunc = &matio_error_func;
 
diff --git a/src/mat.c b/src/mat.c
index e3e5674..fa77e48 100644
--- a/src/mat.c
+++ b/src/mat.c
@@ -26,6 +26,7 @@
 #include <stdio.h>
 #include <math.h>
 #include <time.h>
+#define MATIO_INTERNAL
 #include "matio.h"
 #include "mat5.h"
 #include "mat4.h"
@@ -441,7 +442,7 @@ Mat_VarCalloc(void)
  */
 matvar_t *
 Mat_VarCreate(const char *name,enum matio_classes class_type,
-    enum matio_types data_type,int rank,size_t *dims,void *data,int opt)
+    enum matio_types data_type,int rank,size_t *dims,const void *data,int opt)
 {
     int i, nmemb = 1, nfields = 0;
     matvar_t *matvar = NULL;
@@ -459,7 +460,7 @@ Mat_VarCreate(const char *name,enum matio_classes class_type,
     if ( name )
         matvar->name = strdup_printf("%s",name);
     matvar->rank = rank;
-    matvar->dims = malloc(matvar->rank*sizeof(int));
+    matvar->dims = malloc(matvar->rank*sizeof(size_t));
     for ( i = 0; i < matvar->rank; i++ ) {
         matvar->dims[i] = dims[i];
         nmemb *= dims[i];
@@ -516,7 +517,7 @@ Mat_VarCreate(const char *name,enum matio_classes class_type,
             matvar->data_size = sizeof(matvar_t **);
             nmemb = 0;
             if ( data != NULL ) {
-                fields = data;
+                fields = (matvar_t**) data;
                 nfields = 0;
                 while ( fields[nfields] != NULL )
                     nfields++;
@@ -548,7 +549,7 @@ Mat_VarCreate(const char *name,enum matio_classes class_type,
             matvar->data   = malloc(sizeof(struct ComplexSplit));
             if ( NULL != data ) {
                 struct ComplexSplit *complex_data    = matvar->data;
-                struct ComplexSplit *complex_data_in = data;
+                struct ComplexSplit *complex_data_in = (struct ComplexSplit *) data;
 
                 *complex_data = *complex_data_in;
             }
@@ -561,7 +562,7 @@ Mat_VarCreate(const char *name,enum matio_classes class_type,
             matvar->data   = malloc(sizeof(struct ComplexSplit));
             if ( NULL != matvar->data ) {
                 struct ComplexSplit *complex_data    = matvar->data;
-                struct ComplexSplit *complex_data_in = data;
+                struct ComplexSplit *complex_data_in = (struct ComplexSplit *) data;
 
                 complex_data->Re = malloc(matvar->nbytes);
                 complex_data->Im = malloc(matvar->nbytes);
@@ -905,7 +906,7 @@ Mat_VarFree2(matvar_t *matvar)
 int
 Mat_CalcSingleSubscript(int rank,int *dims,int *subs)
 {
-    int index = 0, i, j, k, err = 0;
+    int ind = 0, i, j, k, err = 0;
 
     for ( i = 0; i < rank; i++ ) {
         k = subs[i];
@@ -920,12 +921,12 @@ Mat_CalcSingleSubscript(int rank,int *dims,int *subs)
         k--;
         for ( j = i; j--; )
             k *= dims[j];
-        index += k;
+        ind += k;
     }
     if ( err )
-        index = -1;
+        ind = -1;
 
-    return index;
+    return ind;
 }
 
 
@@ -944,17 +945,17 @@ Mat_CalcSingleSubscript(int rank,int *dims,int *subs)
  * @ingroup MAT
  * @param rank Rank of the variable
  * @param dims dimensions of the variable
- * @param index linear index
+ * @param ind linear index
  * @return Array of dimension subscripts
  */
 int *
-Mat_CalcSubscripts(int rank,int *dims,int index)
+Mat_CalcSubscripts(int rank,int *dims,int ind)
 {
     int i, j, k, *subs;
     double l;
 
     subs = malloc(rank*sizeof(int));
-    l = index;
+    l = ind;
     for ( i = rank; i--; ) {
         k = 1;
         for ( j = i; j--; )
@@ -973,11 +974,11 @@ Mat_CalcSubscripts(int rank,int *dims,int index)
  * MAT file must be a version 5 matlab file.
  * @ingroup MAT
  * @param matvar Pointer to the Cell Array MAT variable
- * @param index linear index of cell to return
+ * @param ind linear index of cell to return
  * @return Pointer to the Cell Array Field on success, NULL on error
  */
 matvar_t *
-Mat_VarGetCell(matvar_t *matvar,int index)
+Mat_VarGetCell(matvar_t *matvar,int ind)
 {
     int       nmemb = 1, i;
     matvar_t *cell = NULL;
@@ -988,8 +989,8 @@ Mat_VarGetCell(matvar_t *matvar,int index)
     for ( i = 0; i < matvar->rank; i++ )
         nmemb *= matvar->dims[i];
 
-    if ( index < nmemb )
-        cell = *((matvar_t **)matvar->data + index);
+    if ( ind < nmemb )
+        cell = *((matvar_t **)matvar->data + ind);
 
     return cell;
 }
@@ -1078,7 +1079,7 @@ Mat_VarGetCells(matvar_t *matvar,int *start,
  * @returns an array of pointers to the cells
  */
 matvar_t **
-Mat_VarGetCellsLinear(matvar_t *matvar,int start,int stride,int edge)
+Mat_VarGetCellsLinear(matvar_t *matvar,int UNUSED(start),int stride,int edge)
 {
     int i, I = 0;
     matvar_t **cells;
@@ -1210,11 +1211,11 @@ Mat_VarGetNumberOfFields(matvar_t *matvar)
  * value is the index number.
  * @param opt BY_NAME if the name_or_index is the name or BY_INDEX if the index
  * was passed.
- * @param index linear index of the structure to find the field of
+ * @param ind linear index of the structure to find the field of
  * @return Pointer to the Structure Field on success, NULL on error
  */
 matvar_t *
-Mat_VarGetStructField(matvar_t *matvar,void *name_or_index,int opt,int index)
+Mat_VarGetStructField(matvar_t *matvar,const void *name_or_index,int opt,int ind)
 {
     int       i, err = 0, nfields, nmemb;
     matvar_t *field = NULL;
@@ -1225,7 +1226,7 @@ Mat_VarGetStructField(matvar_t *matvar,void *name_or_index,int opt,int index)
 
     nfields = matvar->nbytes / (nmemb*sizeof(matvar_t *));
 
-    if ( index >= nmemb || index < 0)
+    if ( ind >= nmemb || ind < 0)
         err = 1;
 
     if ( !err && (opt == BY_INDEX) ) {
@@ -1236,14 +1237,14 @@ Mat_VarGetStructField(matvar_t *matvar,void *name_or_index,int opt,int index)
         if ( field_index > nfields || field_index < 1 )
             Mat_Critical("Mat_VarGetStructField: field index out of bounds");
         else
-            field = *((matvar_t **)matvar->data+index*nfields+field_index - 1);
+            field = *((matvar_t **)matvar->data+ind*nfields+field_index - 1);
     } else if ( !err && (opt == BY_NAME) ) {
         char *field_name;
 
         field_name = (char *)name_or_index;
 
         for ( i = 0; i < nfields; i++ ) {
-            field = *((matvar_t **)matvar->data+index*nfields+i);
+            field = *((matvar_t **)matvar->data+ind*nfields+i);
             if ( !strcmp(field->name,field_name) )
                 break;
             else
@@ -1363,7 +1364,7 @@ Mat_VarGetStructs(matvar_t *matvar,int *start,int *stride,int *edge,
  * MAT File version must be 5.
  * @ingroup MAT
  * @param matvar Structure matlab variable
- * @param start starting index
+ * @param start starting index (not used)
  * @param stride stride
  * @param edge Number of structures to get
  * @param copy_fields 1 to copy the fields, 0 to just set pointers to them.
@@ -1371,7 +1372,7 @@ Mat_VarGetStructs(matvar_t *matvar,int *start,int *stride,int *edge,
  * @returns A new structure with fields indexed from matvar
  */
 matvar_t *
-Mat_VarGetStructsLinear(matvar_t *matvar,int start,int stride,int edge,
+Mat_VarGetStructsLinear(matvar_t *matvar,int UNUSED(start),int stride,int edge,
     int copy_fields)
 {
     int i, I = 0, field, nfields;
@@ -2074,20 +2075,20 @@ Mat_VarWriteData(mat_t *mat,matvar_t *matvar,void *data,
  * @ingroup MAT
  * @param mat MAT file to write to
  * @param matvar MAT variable information to write
- * @param compress Whether or not to compress the data
+ * @param comp Whether or not to compress the data
  *        (Only valid for version 5 MAT files and variables with numeric data)
  * @retval 0 on success
  */
 int
-Mat_VarWrite(mat_t *mat,matvar_t *matvar,int compress)
+Mat_VarWrite(mat_t *mat,matvar_t *matvar,int comp)
 {
     if ( mat == NULL || matvar == NULL )
         return -1;
     else if ( mat->version == MAT_FT_MAT5 )
-        Mat_VarWrite5(mat,matvar,compress);
+        Mat_VarWrite5(mat,matvar,comp);
 #if MAT73
     else if ( mat->version == MAT_FT_MAT73 )
-        Mat_VarWrite73(mat,matvar,compress);
+        Mat_VarWrite73(mat,matvar,comp);
 #endif
 
     return 0;
diff --git a/src/mat4.c b/src/mat4.c
index 6a9075d..67b7f32 100644
--- a/src/mat4.c
+++ b/src/mat4.c
@@ -22,6 +22,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <math.h>
+#define MATIO_INTERNAL
 #include "matio.h"
 #include "mat4.h"
 #include "matio_private.h"
diff --git a/src/mat5.c b/src/mat5.c
index f5032c4..9e38ad7 100644
--- a/src/mat5.c
+++ b/src/mat5.c
@@ -26,6 +26,7 @@
 #include <stdio.h>
 #include <math.h>
 #include <time.h>
+#define MATIO_INTERNAL
 #include "matio.h"
 #include "mat5.h"
 #include "matio_private.h"
@@ -92,13 +93,13 @@ GetStructFieldBufSize(matvar_t *matvar)
 
     if ( matvar->class_type == MAT_C_STRUCT ) {
         matvar_t **fields = matvar->data;
-        int i, nfields;
+        int j, nfields;
         size_t maxlen = 0;
 
         nfields = matvar->nbytes / (nmemb*matvar->data_size);
-        for ( i = 0; i < nfields; i++ ) {
-            if ( NULL != fields[i]->name && strlen(fields[i]->name) > maxlen )
-                maxlen = strlen(fields[i]->name);
+        for ( j = 0; j < nfields; j++ ) {
+            if ( NULL != fields[j]->name && strlen(fields[j]->name) > maxlen )
+                maxlen = strlen(fields[j]->name);
         }
         maxlen++;
         while ( nfields*maxlen % 8 != 0 )
@@ -108,16 +109,16 @@ GetStructFieldBufSize(matvar_t *matvar)
 
         /* FIXME: Add bytes for the fieldnames */
         if ( NULL != fields && nfields > 0 ) {
-            for ( i = 0; i < nfields*nmemb; i++ )
-                nBytes += GetStructFieldBufSize(fields[i]);
+            for ( j = 0; j < nfields*nmemb; j++ )
+                nBytes += GetStructFieldBufSize(fields[j]);
         }
     } else if ( matvar->class_type == MAT_C_CELL ) {
         matvar_t **cells = matvar->data;
-        int i, ncells = matvar->nbytes / matvar->data_size;
+        int j, ncells = matvar->nbytes / matvar->data_size;
 
         if ( NULL != cells && ncells > 0 ) {
-            for ( i = 0; i < ncells; i++ )
-                nBytes += GetCellArrayFieldBufSize(cells[i]);
+            for ( j = 0; j < ncells; j++ )
+                nBytes += GetCellArrayFieldBufSize(cells[j]);
         }
     } else if ( matvar->class_type == MAT_C_SPARSE ) {
         sparse_t *sparse = matvar->data;
@@ -182,13 +183,13 @@ GetCellArrayFieldBufSize(matvar_t *matvar)
 
     if ( matvar->class_type == MAT_C_STRUCT ) {
         matvar_t **fields = matvar->data;
-        int i, nfields;
+        int j, nfields;
         size_t maxlen = 0;
 
         nfields = matvar->nbytes / (nmemb*matvar->data_size);
-        for ( i = 0; i < nfields; i++ ) {
-            if ( NULL != fields[i]->name && strlen(fields[i]->name) > maxlen )
-                maxlen = strlen(fields[i]->name);
+        for ( j = 0; j < nfields; j++ ) {
+            if ( NULL != fields[j]->name && strlen(fields[j]->name) > maxlen )
+                maxlen = strlen(fields[j]->name);
         }
         maxlen++;
         while ( nfields*maxlen % 8 != 0 )
@@ -197,16 +198,16 @@ GetCellArrayFieldBufSize(matvar_t *matvar)
         nBytes += tag_size + tag_size + maxlen*nfields;
 
         if ( NULL != fields && nfields > 0 ) {
-            for ( i = 0; i < nfields*nmemb; i++ )
-                nBytes += GetStructFieldBufSize(fields[i]);
+            for ( j = 0; j < nfields*nmemb; j++ )
+                nBytes += GetStructFieldBufSize(fields[j]);
         }
     } else if ( matvar->class_type == MAT_C_CELL ) {
         matvar_t **cells = matvar->data;
-        int i, ncells = matvar->nbytes / matvar->data_size;
+        int j, ncells = matvar->nbytes / matvar->data_size;
 
         if ( NULL != cells && ncells > 0 ) {
-            for ( i = 0; i < ncells; i++ )
-                nBytes += GetCellArrayFieldBufSize(cells[i]);
+            for ( j = 0; j < ncells; j++ )
+                nBytes += GetCellArrayFieldBufSize(cells[j]);
         }
     } else if ( matvar->class_type == MAT_C_SPARSE ) {
         sparse_t *sparse = matvar->data;
@@ -268,13 +269,13 @@ GetMatrixMaxBufSize(matvar_t *matvar)
 
     if ( matvar->class_type == MAT_C_STRUCT ) {
         matvar_t **fields = matvar->data;
-        int i, nfields;
+        int j, nfields;
         size_t maxlen = 0;
 
         nfields = matvar->nbytes / (nmemb*matvar->data_size);
-        for ( i = 0; i < nfields; i++ ) {
-            if ( NULL != fields[i]->name && strlen(fields[i]->name) > maxlen )
-                maxlen = strlen(fields[i]->name);
+        for ( j = 0; j < nfields; j++ ) {
+            if ( NULL != fields[j]->name && strlen(fields[j]->name) > maxlen )
+                maxlen = strlen(fields[j]->name);
         }
         maxlen++;
         while ( nfields*maxlen % 8 != 0 )
@@ -284,16 +285,16 @@ GetMatrixMaxBufSize(matvar_t *matvar)
 
         /* FIXME: Add bytes for the fieldnames */
         if ( NULL != fields && nfields > 0 ) {
-            for ( i = 0; i < nfields*nmemb; i++ )
-                nBytes += GetStructFieldBufSize(fields[i]);
+            for ( j = 0; j < nfields*nmemb; j++ )
+                nBytes += GetStructFieldBufSize(fields[j]);
         }
     } else if ( matvar->class_type == MAT_C_CELL ) {
         matvar_t **cells = matvar->data;
-        int i, ncells = matvar->nbytes / matvar->data_size;
+        int j, ncells = matvar->nbytes / matvar->data_size;
 
         if ( NULL != cells && ncells > 0 ) {
-            for ( i = 0; i < ncells; i++ )
-                nBytes += GetCellArrayFieldBufSize(cells[i]);
+            for ( j = 0; j < ncells; j++ )
+                nBytes += GetCellArrayFieldBufSize(cells[j]);
         }
     } else if ( matvar->class_type == MAT_C_SPARSE ) {
         sparse_t *sparse = matvar->data;
@@ -486,7 +487,7 @@ static size_t
 WriteCompressedCharData(mat_t *mat,z_stream *z,void *data,int N,
     enum matio_types data_type)
 {
-    int nBytes = 0, data_size, data_tag[2], err, byteswritten = 0;
+    int data_size, data_tag[2], err, byteswritten = 0;
     int buf_size = 1024, i;
     mat_uint8_t   buf[1024], pad[8] = {0,};
 
@@ -499,7 +500,7 @@ WriteCompressedCharData(mat_t *mat,z_stream *z,void *data,int N,
             data_size = 2;
             data_tag[0]  = MAT_T_UINT16;
             data_tag[1]  = N*data_size;
-            z->next_in   = data_tag;
+            z->next_in   = (Bytef*) data_tag;
             z->avail_in  = 8;
             z->next_out  = buf;
             z->avail_out = buf_size;
@@ -534,7 +535,7 @@ WriteCompressedCharData(mat_t *mat,z_stream *z,void *data,int N,
             data_size    = 2;
             data_tag[0]  = MAT_T_UINT16;
             data_tag[1]  = N*data_size;
-            z->next_in   = data_tag;
+            z->next_in   = (Bytef*) data_tag;
             z->avail_in  = 8;
             z->next_out  = buf;
             z->avail_out = buf_size;
@@ -545,7 +546,7 @@ WriteCompressedCharData(mat_t *mat,z_stream *z,void *data,int N,
             ptr = data;
             for ( i = 0; i < N; i++ ) {
                 c = (mat_uint16_t)*(char *)ptr;
-                z->next_in   = &c;
+                z->next_in   = (Bytef*) &c;
                 z->avail_in  = 2;
                 z->next_out  = buf;
                 z->avail_out = buf_size;
@@ -569,7 +570,7 @@ WriteCompressedCharData(mat_t *mat,z_stream *z,void *data,int N,
             data_size = 1;
             data_tag[0]  = MAT_T_UTF8;
             data_tag[1]  = N*data_size;
-            z->next_in   = data_tag;
+            z->next_in   = (Bytef*) data_tag;
             z->avail_in  = 8;
             z->next_out  = buf;
             z->avail_out = buf_size;
@@ -827,15 +828,15 @@ WriteCompressedEmptyData(mat_t *mat,z_stream *z,int N,
             nBytes = N*data_size;
             uncomp_buf[0] = data_type;
             uncomp_buf[1] = 0;
-            z->next_out  = comp_buf;
-            z->next_in   = uncomp_buf;
+            z->next_out  = (Bytef*) comp_buf;
+            z->next_in   = (Bytef*) uncomp_buf;
             z->avail_out = 32*sizeof(*comp_buf);
             z->avail_in  = 8;
             err = deflate(z,Z_NO_FLUSH);
             byteswritten += fwrite(comp_buf,1,32*sizeof(*comp_buf)-z->avail_out,mat->fp);
             for ( i = 0; i < N; i++ ) {
-                z->next_out  = comp_buf;
-                z->next_in   = data_uncomp_buf;
+                z->next_out  = (Bytef*) comp_buf;
+                z->next_in   = (Bytef*) data_uncomp_buf;
                 z->avail_out = 32*sizeof(*comp_buf);
                 z->avail_in  = 8;
                 err = deflate(z,Z_NO_FLUSH);
@@ -1370,7 +1371,7 @@ WriteCompressedData(mat_t *mat,z_stream *z,void *data,int N,
 
     data_tag[0]  = data_type;
     data_tag[1]  = data_size*N;
-    z->next_in   = data_tag;
+    z->next_in   = (Bytef*) data_tag;
     z->avail_in  = 8;
     z->next_out  = buf;
     z->avail_out = buf_size;
@@ -1520,23 +1521,23 @@ ReadNextCell( mat_t *mat, matvar_t *matvar )
 #endif
 
     } else {
-        int ncells;
+        int ncells1;
         mat_uint32_t buf[16];
         int      nbytes,nBytes;
         mat_uint32_t array_flags; 
 
-        ncells = 1;
+        ncells1 = 1;
         for ( i = 0; i < matvar->rank; i++ )
-            ncells *= matvar->dims[i];
+            ncells1 *= matvar->dims[i];
         matvar->data_size = sizeof(matvar_t *);
-        matvar->nbytes    = ncells*matvar->data_size;
+        matvar->nbytes    = ncells1*matvar->data_size;
         matvar->data = malloc(matvar->nbytes);
         if ( !matvar->data ) {
             Mat_Critical("Couldn't allocate memory for %s->data",matvar->name);
             return bytesread;
         }
         cells = (matvar_t **)matvar->data;
-        for ( i = 0; i < ncells; i++ ) {
+        for ( i = 0; i < ncells1; i++ ) {
             int cell_bytes_read;
             cells[i] = Mat_VarCalloc();
             if ( !cells[i] ) {
@@ -1653,7 +1654,7 @@ ReadNextStructField( mat_t *mat, matvar_t *matvar )
 #if defined(HAVE_ZLIB)
         char    *ptr;
         mat_uint32_t uncomp_buf[16] = {0,};
-        int      nbytes, j, nmemb = 1;
+        int      nbytes, nmemb = 1;
         mat_uint32_t array_flags; 
 
         for ( i = 0; i < matvar->rank; i++ )
@@ -1698,6 +1699,7 @@ ReadNextStructField( mat_t *mat, matvar_t *matvar )
             fields[i]->name[fieldname_size-1] = '\0';
         }
         for ( i = 1; i < nmemb; i++ ) {
+            int j;
             for ( j = 0; j < nfields; j++ ) {
                 fields[i*nfields+j] = Mat_VarCalloc();
                 fields[i*nfields+j]->name = strdup_printf("%s",fields[j]->name);
@@ -1791,9 +1793,8 @@ ReadNextStructField( mat_t *mat, matvar_t *matvar )
         Mat_Critical("Not compiled with zlib support");
 #endif
     } else {
-        int fieldname_size,nfields;
         mat_uint32_t buf[16] = {0,};
-        int      nbytes,nBytes,nmemb=1,j;
+        int      nbytes,nBytes,nmemb=1;
         mat_uint32_t array_flags; 
 
         for ( i = 0; i < matvar->rank; i++ )
@@ -1830,6 +1831,7 @@ ReadNextStructField( mat_t *mat, matvar_t *matvar )
             fields[i]->name[fieldname_size-1] = '\0';
         }
         for ( i = 1; i < nmemb; i++ ) {
+            int j;
             for ( j = 0; j < nfields; j++ ) {
                 fields[i*nfields+j] = Mat_VarCalloc();
                 fields[i*nfields+j]->name = strdup_printf("%s",fields[j]->name);
@@ -2028,7 +2030,7 @@ WriteCellArrayFieldInfo(mat_t *mat,matvar_t *matvar)
         fwrite(&pad4,4,1,mat->fp);
     } else if ( strlen(matvar->name) <= 4 ) {
         mat_int16_t array_name_len = (mat_int16_t)strlen(matvar->name);
-        mat_int8_t  pad1 = 0;
+        pad1 = 0;
         fwrite(&array_name_type,2,1,mat->fp);
         fwrite(&array_name_len,2,1,mat->fp);
         fwrite(matvar->name,1,array_name_len,mat->fp);
@@ -2036,7 +2038,7 @@ WriteCellArrayFieldInfo(mat_t *mat,matvar_t *matvar)
             fwrite(&pad1,1,1,mat->fp);
     } else {
         mat_int32_t array_name_len = (mat_int32_t)strlen(matvar->name);
-        mat_int8_t  pad1 = 0;
+        pad1 = 0;
 
         fwrite(&array_name_type,2,1,mat->fp);
         fwrite(&pad1,1,1,mat->fp);
@@ -2166,7 +2168,7 @@ WriteCellArrayField(mat_t *mat,matvar_t *matvar )
         fwrite(&pad4,4,1,mat->fp);
     } else if ( strlen(matvar->name) <= 4 ) {
         mat_int16_t array_name_len = (mat_int16_t)strlen(matvar->name);
-        mat_int8_t  pad1 = 0;
+        pad1 = 0;
         fwrite(&array_name_type,2,1,mat->fp);
         fwrite(&array_name_len,2,1,mat->fp);
         fwrite(matvar->name,1,array_name_len,mat->fp);
@@ -2174,7 +2176,7 @@ WriteCellArrayField(mat_t *mat,matvar_t *matvar )
             fwrite(&pad1,1,1,mat->fp);
     } else {
         mat_int32_t array_name_len = (mat_int32_t)strlen(matvar->name);
-        mat_int8_t  pad1 = 0;
+        pad1 = 0;
 
         fwrite(&array_name_type,2,1,mat->fp);
         fwrite(&pad1,1,1,mat->fp);
@@ -2316,7 +2318,6 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
     mat_int16_t  fieldname_data_size = 4;
     int      array_flags_type = MAT_T_UINT32, dims_array_type = MAT_T_INT32;
     int      array_flags_size = 8, pad4 = 0;
-    mat_int8_t   pad1 = 0;
     int      nBytes, i, nmemb = 1, nzmax = 0;
     long     start = 0;
 
@@ -2343,8 +2344,8 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
 
     uncomp_buf[0] = MAT_T_MATRIX;
     uncomp_buf[1] = (int)GetMatrixMaxBufSize(matvar);
-    z->next_out  = comp_buf;
-    z->next_in   = uncomp_buf;
+    z->next_out  = (Bytef*) comp_buf;
+    z->next_in   = (Bytef*) uncomp_buf;
     z->avail_out = buf_size*sizeof(*comp_buf);
     z->avail_in  = 8;
     err = deflate(z,Z_NO_FLUSH);
@@ -2369,8 +2370,8 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
         i++;
     }
 
-    z->next_out  = comp_buf;
-    z->next_in   = uncomp_buf;
+    z->next_out  = (Bytef*) comp_buf;
+    z->next_in   = (Bytef*) uncomp_buf;
     z->avail_out = buf_size*sizeof(*comp_buf);
     z->avail_in  = (6+i)*sizeof(*uncomp_buf);
     err = deflate(z,Z_NO_FLUSH);
@@ -2379,8 +2380,8 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
     /* Name of variable */
     uncomp_buf[0] = array_name_type;
     uncomp_buf[1] = 0;
-    z->next_out  = comp_buf;
-    z->next_in   = uncomp_buf;
+    z->next_out  = (Bytef*) comp_buf;
+    z->next_in   = (Bytef*) uncomp_buf;
     z->avail_out = buf_size*sizeof(*comp_buf);
     z->avail_in  = 8;
     err = deflate(z,Z_NO_FLUSH);
@@ -2441,7 +2442,7 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
             unsigned char *padzero;
             int        fieldname_size, nfields;
             size_t     maxlen = 0;
-            mat_int32_t array_name_type = MAT_T_INT8;
+            array_name_type = MAT_T_INT8;
             matvar_t **fields = (matvar_t **)matvar->data;
 
             /* Check for a structure with no fields */
@@ -2453,8 +2454,8 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
                 uncomp_buf[1] = 1;
                 uncomp_buf[2] = array_name_type;
                 uncomp_buf[3] = 0;
-                z->next_out  = comp_buf;
-                z->next_in   = uncomp_buf;
+                z->next_out  = (Bytef*) comp_buf;
+                z->next_in   = (Bytef*) uncomp_buf;
                 z->avail_out = buf_size*sizeof(*comp_buf);
                 z->avail_in  = 32;
                 err = deflate(z,Z_NO_FLUSH);
@@ -2479,8 +2480,8 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
             uncomp_buf[3] = nfields*fieldname_size;
 
             padzero = calloc(fieldname_size,1);
-            z->next_out  = comp_buf;
-            z->next_in   = uncomp_buf;
+            z->next_out  = (Bytef*) comp_buf;
+            z->next_in   = (Bytef*) uncomp_buf;
             z->avail_out = buf_size*sizeof(*comp_buf);
             z->avail_in  = 16;
             err = deflate(z,Z_NO_FLUSH);
@@ -2489,7 +2490,7 @@ WriteCompressedCellArrayField(mat_t *mat,matvar_t *matvar,z_stream *z)
             for ( i = 0; i < nfields; i++ ) {
                 memset(padzero,'\0',fieldname_size);
                 memcpy(padzero,fieldnames[i],strlen(fieldnames[i]));
-                z->next_out  = comp_buf;
+                z->next_out  = (Bytef*) comp_buf;
                 z->next_in   = padzero;
                 z->avail_out = buf_size*sizeof(*comp_buf);
                 z->avail_in  = fieldname_size;
@@ -2726,7 +2727,6 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
     mat_int16_t  fieldname_data_size = 4;
     int      array_flags_type = MAT_T_UINT32, dims_array_type = MAT_T_INT32;
     int      array_flags_size = 8, pad4 = 0;
-    mat_int8_t   pad1 = 0;
     int      nBytes, i, nmemb = 1, nzmax = 0;
     long     start = 0;
 
@@ -2753,8 +2753,8 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
 
     uncomp_buf[0] = MAT_T_MATRIX;
     uncomp_buf[1] = (int)GetMatrixMaxBufSize(matvar);
-    z->next_out  = comp_buf;
-    z->next_in   = uncomp_buf;
+    z->next_out  = (Bytef*) comp_buf;
+    z->next_in   = (Bytef*) uncomp_buf;
     z->avail_out = buf_size*sizeof(*comp_buf);
     z->avail_in  = 8;
     err = deflate(z,Z_NO_FLUSH);
@@ -2779,8 +2779,8 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
         i++;
     }
 
-    z->next_out  = comp_buf;
-    z->next_in   = uncomp_buf;
+    z->next_out  = (Bytef*) comp_buf;
+    z->next_in   = (Bytef*) uncomp_buf;
     z->avail_out = buf_size*sizeof(*comp_buf);
     z->avail_in  = (6+i)*sizeof(*uncomp_buf);
     err = deflate(z,Z_NO_FLUSH);
@@ -2789,8 +2789,8 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
     /* Name of variable */
     uncomp_buf[0] = array_name_type;
     uncomp_buf[1] = 0;
-    z->next_out  = comp_buf;
-    z->next_in   = uncomp_buf;
+    z->next_out  = (Bytef*) comp_buf;
+    z->next_in   = (Bytef*) uncomp_buf;
     z->avail_out = buf_size*sizeof(*comp_buf);
     z->avail_in  = 8;
     err = deflate(z,Z_NO_FLUSH);
@@ -2851,7 +2851,7 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
             unsigned char *padzero;
             int        fieldname_size, nfields;
             size_t     maxlen = 0;
-            mat_int32_t array_name_type = MAT_T_INT8;
+            array_name_type = MAT_T_INT8;
             matvar_t **fields = (matvar_t **)matvar->data;
 
             /* Check for a structure with no fields */
@@ -2863,8 +2863,8 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
                 uncomp_buf[1] = 1;
                 uncomp_buf[2] = array_name_type;
                 uncomp_buf[3] = 0;
-                z->next_out  = comp_buf;
-                z->next_in   = uncomp_buf;
+                z->next_out  = (Bytef*) comp_buf;
+                z->next_in   = (Bytef*) uncomp_buf;
                 z->avail_out = buf_size*sizeof(*comp_buf);
                 z->avail_in  = 32;
                 err = deflate(z,Z_NO_FLUSH);
@@ -2889,8 +2889,8 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
             uncomp_buf[3] = nfields*fieldname_size;
 
             padzero = calloc(fieldname_size,1);
-            z->next_out  = comp_buf;
-            z->next_in   = uncomp_buf;
+            z->next_out  = (Bytef*) comp_buf;
+            z->next_in   = (Bytef*) uncomp_buf;
             z->avail_out = buf_size*sizeof(*comp_buf);
             z->avail_in  = 16;
             err = deflate(z,Z_NO_FLUSH);
@@ -2899,7 +2899,7 @@ WriteCompressedStructField(mat_t *mat,matvar_t *matvar,z_stream *z)
             for ( i = 0; i < nfields; i++ ) {
                 memset(padzero,'\0',fieldname_size);
                 memcpy(padzero,fieldnames[i],strlen(fieldnames[i]));
-                z->next_out  = comp_buf;
+                z->next_out  = (Bytef*) comp_buf;
                 z->next_in   = padzero;
                 z->avail_out = buf_size*sizeof(*comp_buf);
                 z->avail_in  = fieldname_size;
@@ -5384,7 +5384,6 @@ ReadData5(mat_t *mat,matvar_t *matvar,void *data,
     } else {
         if ( matvar->compression == COMPRESSION_NONE ) {
             if ( matvar->isComplex ) {
-                int i;
                 struct ComplexSplit *complex_data = data;
 
                 ReadDataSlabN(mat,complex_data->Re,matvar->class_type,
@@ -5412,7 +5411,6 @@ ReadData5(mat_t *mat,matvar_t *matvar,void *data,
 #if defined(HAVE_ZLIB)
         else if ( matvar->compression == COMPRESSION_ZLIB ) {
             if ( matvar->isComplex ) {
-                int i;
                 struct ComplexSplit *complex_data = data;
 
                 ReadCompressedDataSlabN(mat,&z,complex_data->Re,
@@ -5504,13 +5502,13 @@ ReadData5(mat_t *mat,matvar_t *matvar,void *data,
  * @ingroup mat_internal
  * @param mat MAT file pointer
  * @param matvar pointer to the mat variable
- * @param compress option to compress the variable
- *                 (only works for numeric types)
+ * @param comp option to compress the variable
+ *             (only works for numeric types)
  * @retval 0 on success
  * @endif
  */
 int
-Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
+Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int comp)
 {
     mat_uint32_t array_flags = 0x0;
     mat_int16_t  fieldname_type = MAT_T_INT32,fieldname_data_size=4;
@@ -5524,7 +5522,7 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
     fseek(mat->fp,0,SEEK_END);         /* Always write at end of file */
 
 
-    if ( compress == COMPRESSION_NONE ) {
+    if ( comp == COMPRESSION_NONE ) {
         fwrite(&matrix_type,4,1,mat->fp);
         fwrite(&pad4,4,1,mat->fp);
         start = ftell(mat->fp);
@@ -5561,7 +5559,6 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
         if ( strlen(matvar->name) <= 4 ) {
             mat_int32_t  array_name_type = MAT_T_INT8;
             mat_int32_t array_name_len   = strlen(matvar->name);
-            mat_int8_t  pad1 = 0;
 #if 0
             fwrite(&array_name_type,2,1,mat->fp);
             fwrite(&array_name_len,2,1,mat->fp);
@@ -5575,7 +5572,6 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
         } else {
             mat_int32_t array_name_type = MAT_T_INT8;
             mat_int32_t array_name_len  = (mat_int32_t)strlen(matvar->name);
-            mat_int8_t  pad1 = 0;
 
             fwrite(&array_name_type,4,1,mat->fp);
             fwrite(&array_name_len,4,1,mat->fp);
@@ -5729,7 +5725,7 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
             }
         }
 #if defined(HAVE_ZLIB)
-    } else if ( compress == COMPRESSION_ZLIB ) {
+    } else if ( comp == COMPRESSION_ZLIB ) {
         mat_uint32_t comp_buf[512];
         mat_uint32_t uncomp_buf[512] = {0,};
         int buf_size = 512, err;
@@ -5758,8 +5754,8 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
 
         uncomp_buf[0] = MAT_T_MATRIX;
         uncomp_buf[1] = (int)GetMatrixMaxBufSize(matvar);
-        matvar->internal->z->next_out  = comp_buf;
-        matvar->internal->z->next_in   = uncomp_buf;
+        matvar->internal->z->next_out  = (Bytef*) comp_buf;
+        matvar->internal->z->next_in   = (Bytef*) uncomp_buf;
         matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
         matvar->internal->z->avail_in  = 8;
         err = deflate(matvar->internal->z,Z_NO_FLUSH);
@@ -5784,8 +5780,8 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
             i++;
         }
 
-        matvar->internal->z->next_out  = comp_buf;
-        matvar->internal->z->next_in   = uncomp_buf;
+        matvar->internal->z->next_out  = (Bytef*) comp_buf;
+        matvar->internal->z->next_in   = (Bytef*) uncomp_buf;
         matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
         matvar->internal->z->avail_in  = (6+i)*sizeof(*uncomp_buf);
         err = deflate(matvar->internal->z,Z_NO_FLUSH);
@@ -5802,8 +5798,8 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
             if ( array_name_len % 4 )
                 array_name_len += 4-(array_name_len % 4);
 
-            matvar->internal->z->next_out  = comp_buf;
-            matvar->internal->z->next_in   = uncomp_buf;
+            matvar->internal->z->next_out  = (Bytef*) comp_buf;
+            matvar->internal->z->next_in   = (Bytef*) uncomp_buf;
             matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
             matvar->internal->z->avail_in  = 8;
             err = deflate(matvar->internal->z,Z_NO_FLUSH);
@@ -5819,8 +5815,8 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
             memcpy(uncomp_buf+2,matvar->name,array_name_len);
             if ( array_name_len % 8 )
                 array_name_len += 8-(array_name_len % 8);
-            matvar->internal->z->next_out  = comp_buf;
-            matvar->internal->z->next_in   = uncomp_buf;
+            matvar->internal->z->next_out  = (Bytef*) comp_buf;
+            matvar->internal->z->next_in   = (Bytef*) uncomp_buf;
             matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
             matvar->internal->z->avail_in  = 8+array_name_len;
             err = deflate(matvar->internal->z,Z_NO_FLUSH);
@@ -5893,8 +5889,8 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
                     uncomp_buf[1] = 1;
                     uncomp_buf[2] = array_name_type;
                     uncomp_buf[3] = 0;
-                    matvar->internal->z->next_out  = comp_buf;
-                    matvar->internal->z->next_in   = uncomp_buf;
+                    matvar->internal->z->next_out  = (Bytef*) comp_buf;
+                    matvar->internal->z->next_in   = (Bytef*) uncomp_buf;
                     matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
                     matvar->internal->z->avail_in  = 32;
                     err = deflate(matvar->internal->z,Z_NO_FLUSH);
@@ -5919,8 +5915,8 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
                 uncomp_buf[3] = nfields*fieldname_size;
 
                 padzero = calloc(fieldname_size,1);
-                matvar->internal->z->next_out  = comp_buf;
-                matvar->internal->z->next_in   = uncomp_buf;
+                matvar->internal->z->next_out  = (Bytef*) comp_buf;
+                matvar->internal->z->next_in   = (Bytef*) uncomp_buf;
                 matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
                 matvar->internal->z->avail_in  = 16;
                 err = deflate(matvar->internal->z,Z_NO_FLUSH);
@@ -5929,7 +5925,7 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
                 for ( i = 0; i < nfields; i++ ) {
                     memset(padzero,'\0',fieldname_size);
                     memcpy(padzero,fieldnames[i],strlen(fieldnames[i]));
-                    matvar->internal->z->next_out  = comp_buf;
+                    matvar->internal->z->next_out  = (Bytef*) comp_buf;
                     matvar->internal->z->next_in   = padzero;
                     matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
                     matvar->internal->z->avail_in  = fieldname_size;
@@ -5968,14 +5964,14 @@ Mat_VarWrite5(mat_t *mat,matvar_t *matvar,int compress)
         }
         matvar->internal->z->avail_in  = 0;
         matvar->internal->z->next_in   = NULL;
-        matvar->internal->z->next_out  = comp_buf;
+        matvar->internal->z->next_out  = (Bytef*) comp_buf;
         matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
 
         err = deflate(matvar->internal->z,Z_FINISH);
         byteswritten += fwrite(comp_buf,1,
             buf_size*sizeof(*comp_buf)-matvar->internal->z->avail_out,mat->fp);
         while ( err != Z_STREAM_END && !matvar->internal->z->avail_out ) {
-            matvar->internal->z->next_out  = comp_buf;
+            matvar->internal->z->next_out  = (Bytef*) comp_buf;
             matvar->internal->z->avail_out = buf_size*sizeof(*comp_buf);
 
             err = deflate(matvar->internal->z,Z_FINISH);
@@ -6063,7 +6059,6 @@ WriteInfo5(mat_t *mat, matvar_t *matvar)
         /* Name of variable */
         if ( strlen(matvar->name) <= 4 ) {
             mat_int16_t array_name_len = (mat_int16_t)strlen(matvar->name);
-            mat_int8_t  pad1 = 0;
             mat_int16_t array_name_type = MAT_T_INT8;
             fwrite(&array_name_type,2,1,mat->fp);
             fwrite(&array_name_len,2,1,mat->fp);
@@ -6072,7 +6067,6 @@ WriteInfo5(mat_t *mat, matvar_t *matvar)
                 fwrite(&pad1,1,1,mat->fp);
         } else {
             mat_int32_t array_name_len = (mat_int32_t)strlen(matvar->name);
-            mat_int8_t  pad1 = 0;
             mat_int32_t  array_name_type = MAT_T_INT8;
 
             fwrite(&array_name_type,4,1,mat->fp);
@@ -6123,7 +6117,7 @@ WriteInfo5(mat_t *mat, matvar_t *matvar)
             case MAT_C_STRUCT:
             {
                 char **fieldnames, *padzero;
-                int maxlen = 0, fieldname_size;
+                size_t maxlen = 0, fieldname_size;
                 int nfields = matvar->nbytes / matvar->data_size;
                 matvar_t **fields = (matvar_t **)matvar->data;
                 mat_int32_t  array_name_type = MAT_T_INT8;
@@ -6471,14 +6465,14 @@ Mat_VarReadNextInfo5( mat_t *mat )
         {
             int      nbytes;
             mat_uint32_t buf[32];
-            size_t   bytesread = 0;
+            size_t   bytesread1 = 0;
 
             matvar = Mat_VarCalloc();
             matvar->internal->fpos = fpos;
             matvar->internal->fp   = mat;
 
             /* Read Array Flags and The Dimensions Tag */
-            bytesread  += fread(buf,4,6,mat->fp);
+            bytesread1  += fread(buf,4,6,mat->fp);
             if ( mat->byteswap ) {
                 (void)Mat_uint32Swap(buf);
                 (void)Mat_uint32Swap(buf+1);
@@ -6508,9 +6502,9 @@ Mat_VarReadNextInfo5( mat_t *mat )
 
                 /* Assumes rank <= 16 */
                 if ( matvar->rank % 2 != 0 )
-                    bytesread+=fread(buf,4,matvar->rank+1,mat->fp);
+                    bytesread1+=fread(buf,4,matvar->rank+1,mat->fp);
                 else
-                    bytesread+=fread(buf,4,matvar->rank,mat->fp);
+                    bytesread1+=fread(buf,4,matvar->rank,mat->fp);
 
                 if ( mat->byteswap ) {
                     for ( i = 0; i < matvar->rank; i++ )
@@ -6521,7 +6515,7 @@ Mat_VarReadNextInfo5( mat_t *mat )
                 }
             }
             /* Variable Name Tag */
-            bytesread+=fread(buf,4,2,mat->fp);
+            bytesread1+=fread(buf,4,2,mat->fp);
             if ( mat->byteswap )
                 (void)Mat_uint32Swap(buf);
             /* Name of variable */
@@ -6536,7 +6530,7 @@ Mat_VarReadNextInfo5( mat_t *mat )
                     i = len;
                 else
                     i = len+(8-(len % 8));
-                bytesread+=fread(buf,1,i,mat->fp);
+                bytesread1+=fread(buf,1,i,mat->fp);
 
                 matvar->name = malloc(len+1);
                 memcpy(matvar->name,buf,len);
diff --git a/src/matio.h b/src/matio.h
index b50efcf..477e447 100644
--- a/src/matio.h
+++ b/src/matio.h
@@ -26,6 +26,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include "matioConfig.h"
+#include "DLLDefines.h"
 #if defined(HAVE_INTTYPES_H)
 #   include <inttypes.h>
 #endif
@@ -189,7 +190,7 @@ enum {
  * Complex data type using split real/imaginary pointers
  * @ingroup MAT
  */
-struct ComplexSplit {
+struct MATIO_EXPORT ComplexSplit {
     void *Re; /**< Pointer to the real part */
     void *Im; /**< Pointer to the imaginary part */
 };
@@ -209,7 +210,7 @@ struct matvar_internal;
  * Contains information about a Matlab variable
  * @ingroup MAT
  */
-typedef struct matvar_t {
+typedef struct MATIO_EXPORT matvar_t {
     int   nbytes;                     /**< Number of bytes for the MAT variable */
     int   rank;                       /**< Rank (Number of dimensions) of the data */
     enum matio_types   data_type;     /**< Data type(MAT_T_*) */
@@ -231,7 +232,7 @@ typedef struct matvar_t {
  * Contains information and data for a sparse matrix
  * @ingroup MAT
  */
-typedef struct sparse_t {
+typedef struct MATIO_EXPORT sparse_t {
     int nzmax;               /**< Maximum number of non-zero elements */
     int *ir;                 /**< Array of size nzmax where ir[k] is the row of
                                *  data[k].  0 <= k <= nzmax
@@ -247,71 +248,71 @@ typedef struct sparse_t {
 } sparse_t;
 
 /*     io.c         */
-EXTERN char  *strdup_vprintf(const char *format, va_list ap);
-EXTERN char  *strdup_printf(const char *format, ...);
-EXTERN int    Mat_SetVerbose( int verb, int s );
-EXTERN int    Mat_SetDebug( int d );
-EXTERN void   Mat_Critical( const char *format, ... );
-EXTERN void   Mat_Error( const char *format, ... );
-EXTERN void   Mat_Help( const char *helpstr[] );
-EXTERN int    Mat_LogInit( const char *progname );
-EXTERN int    Mat_LogClose(void);
-EXTERN int    Mat_LogInitFunc(const char *prog_name,
-                    void (*log_func)(int log_level, char *message) );
-EXTERN int    Mat_Message( const char *format, ... );
-EXTERN int    Mat_DebugMessage( int level, const char *format, ... );
-EXTERN int    Mat_VerbMessage( int level, const char *format, ... );
-EXTERN void   Mat_Warning( const char *format, ... );
-EXTERN size_t Mat_SizeOf(enum matio_types data_type);
-EXTERN size_t Mat_SizeOfClass(int class_type);
+EXTERN MATIO_EXPORT char  *strdup_vprintf(const char *format, va_list ap);
+EXTERN MATIO_EXPORT char  *strdup_printf(const char *format, ...);
+EXTERN MATIO_EXPORT int    Mat_SetVerbose( int verb, int s );
+EXTERN MATIO_EXPORT int    Mat_SetDebug( int d );
+EXTERN MATIO_EXPORT void   Mat_Critical( const char *format, ... );
+EXTERN MATIO_EXPORT void   Mat_Error( const char *format, ... );
+EXTERN MATIO_EXPORT void   Mat_Help( const char *helpstr[] );
+EXTERN MATIO_EXPORT int    Mat_LogInit( const char *progname );
+EXTERN MATIO_EXPORT int    Mat_LogClose(void);
+EXTERN MATIO_EXPORT int    Mat_LogInitFunc(const char *prog_name,
+                           void (*log_func)(int log_level, char *message) );
+EXTERN MATIO_EXPORT int    Mat_Message( const char *format, ... );
+EXTERN MATIO_EXPORT int    Mat_DebugMessage( int level, const char *format, ... );
+EXTERN MATIO_EXPORT int    Mat_VerbMessage( int level, const char *format, ... );
+EXTERN MATIO_EXPORT void   Mat_Warning( const char *format, ... );
+EXTERN MATIO_EXPORT size_t Mat_SizeOf(enum matio_types data_type);
+EXTERN MATIO_EXPORT size_t Mat_SizeOfClass(int class_type);
 
 /*   MAT File functions   */
 #define        Mat_Create(a,b) Mat_CreateVer(a,b,MAT_FT_DEFAULT)
-EXTERN mat_t  *Mat_CreateVer(const char *matname,const char *hdr_str,
-                   enum mat_ft mat_file_ver);
-EXTERN int     Mat_Close(mat_t *mat);
-EXTERN mat_t  *Mat_Open(const char *matname,int mode);
-EXTERN int     Mat_Rewind(mat_t *mat);
+EXTERN MATIO_EXPORT mat_t  *Mat_CreateVer(const char *matname,const char *hdr_str,
+                                          enum mat_ft mat_file_ver);
+EXTERN MATIO_EXPORT int     Mat_Close(mat_t *mat);
+EXTERN MATIO_EXPORT mat_t  *Mat_Open(const char *matname,int mode);
+EXTERN MATIO_EXPORT int     Mat_Rewind(mat_t *mat);
 
 /* MAT variable functions */
-EXTERN matvar_t  *Mat_VarCalloc(void);
-EXTERN matvar_t  *Mat_VarCreate(const char *name,enum matio_classes class_type,
-                      enum matio_types data_type,int rank,size_t *dims,
-                      void *data,int opt);
-EXTERN int        Mat_VarDelete(mat_t *mat, const char *name);
-EXTERN matvar_t  *Mat_VarDuplicate(const matvar_t *in, int opt);
-EXTERN void       Mat_VarFree(matvar_t *matvar);
-EXTERN matvar_t  *Mat_VarGetCell(matvar_t *matvar,int index);
-EXTERN matvar_t **Mat_VarGetCells(matvar_t *matvar,int *start,int *stride,
-                      int *edge);
-EXTERN matvar_t **Mat_VarGetCellsLinear(matvar_t *matvar,int start,int stride,
-                      int edge);
-EXTERN size_t     Mat_VarGetSize(matvar_t *matvar);
-EXTERN int        Mat_VarGetNumberOfFields(matvar_t *matvar);
-EXTERN int        Mat_VarAddStructField(matvar_t *matvar,matvar_t **fields);
-EXTERN matvar_t  *Mat_VarGetStructField(matvar_t *matvar,void *name_or_index,
-                      int opt,int index);
-EXTERN matvar_t  *Mat_VarGetStructs(matvar_t *matvar,int *start,int *stride,
-                      int *edge,int copy_fields);
-EXTERN matvar_t  *Mat_VarGetStructsLinear(matvar_t *matvar,int start,int stride,
-                      int edge,int copy_fields);
-EXTERN void       Mat_VarPrint( matvar_t *matvar, int printdata );
-EXTERN matvar_t  *Mat_VarRead(mat_t *mat, const char *name );
-EXTERN int        Mat_VarReadData(mat_t *mat,matvar_t *matvar,void *data,
-                      int *start,int *stride,int *edge);
-EXTERN int        Mat_VarReadDataAll(mat_t *mat,matvar_t *matvar);
-EXTERN int        Mat_VarReadDataLinear(mat_t *mat,matvar_t *matvar,void *data,
-                      int start,int stride,int edge);
-EXTERN matvar_t  *Mat_VarReadInfo( mat_t *mat, const char *name );
-EXTERN matvar_t  *Mat_VarReadNext( mat_t *mat );
-EXTERN matvar_t  *Mat_VarReadNextInfo( mat_t *mat );
-EXTERN int        Mat_VarWrite(mat_t *mat,matvar_t *matvar,int compress );
-EXTERN int        Mat_VarWriteInfo(mat_t *mat,matvar_t *matvar);
-EXTERN int        Mat_VarWriteData(mat_t *mat,matvar_t *matvar,void *data,
-                      int *start,int *stride,int *edge);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarCalloc(void);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarCreate(const char *name,enum matio_classes class_type,
+                                             enum matio_types data_type,int rank,size_t *dims,
+                                             const void *data,int opt);
+EXTERN MATIO_EXPORT int        Mat_VarDelete(mat_t *mat, const char *name);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarDuplicate(const matvar_t *in, int opt);
+EXTERN MATIO_EXPORT void       Mat_VarFree(matvar_t *matvar);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarGetCell(matvar_t *matvar,int index);
+EXTERN MATIO_EXPORT matvar_t **Mat_VarGetCells(matvar_t *matvar,int *start,int *stride,
+                                               int *edge);
+EXTERN MATIO_EXPORT matvar_t **Mat_VarGetCellsLinear(matvar_t *matvar,int start,int stride,
+                                                     int edge);
+EXTERN MATIO_EXPORT size_t     Mat_VarGetSize(matvar_t *matvar);
+EXTERN MATIO_EXPORT int        Mat_VarGetNumberOfFields(matvar_t *matvar);
+EXTERN MATIO_EXPORT int        Mat_VarAddStructField(matvar_t *matvar,matvar_t **fields);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarGetStructField(matvar_t *matvar,const void *name_or_index,
+                                                     int opt,int index);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarGetStructs(matvar_t *matvar,int *start,int *stride,
+                                                 int *edge,int copy_fields);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarGetStructsLinear(matvar_t *matvar,int start,int stride,
+                                                       int edge,int copy_fields);
+EXTERN MATIO_EXPORT void       Mat_VarPrint( matvar_t *matvar, int printdata );
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarRead(mat_t *mat, const char *name );
+EXTERN MATIO_EXPORT int        Mat_VarReadData(mat_t *mat,matvar_t *matvar,void *data,
+                                               int *start,int *stride,int *edge);
+EXTERN MATIO_EXPORT int        Mat_VarReadDataAll(mat_t *mat,matvar_t *matvar);
+EXTERN MATIO_EXPORT int        Mat_VarReadDataLinear(mat_t *mat,matvar_t *matvar,void *data,
+                                                     int start,int stride,int edge);
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarReadInfo( mat_t *mat, const char *name );
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarReadNext( mat_t *mat );
+EXTERN MATIO_EXPORT matvar_t  *Mat_VarReadNextInfo( mat_t *mat );
+EXTERN MATIO_EXPORT int        Mat_VarWrite(mat_t *mat,matvar_t *matvar,int compress );
+EXTERN MATIO_EXPORT int        Mat_VarWriteInfo(mat_t *mat,matvar_t *matvar);
+EXTERN MATIO_EXPORT int        Mat_VarWriteData(mat_t *mat,matvar_t *matvar,void *data,
+                                                int *start,int *stride,int *edge);
 
 /* Other functions */
-EXTERN int       Mat_CalcSingleSubscript(int rank,int *dims,int *subs);
-EXTERN int      *Mat_CalcSubscripts(int rank,int *dims,int index);
+EXTERN MATIO_EXPORT int       Mat_CalcSingleSubscript(int rank,int *dims,int *subs);
+EXTERN MATIO_EXPORT int      *Mat_CalcSubscripts(int rank,int *dims,int index);
 
 #endif
diff --git a/src/matio_private.h b/src/matio_private.h
index 4bcb485..489f1ad 100644
--- a/src/matio_private.h
+++ b/src/matio_private.h
@@ -41,7 +41,7 @@
  * @ingroup mat_internal
  * @endif
  */
-struct _mat_t {
+struct MATIO_EXPORT _mat_t {
     void *fp;               /**< File pointer for the MAT file */
     char *header;           /**< MAT File header string */
     char *subsys_offset;    /**< offset */
@@ -71,6 +71,15 @@ struct matvar_internal {
 #endif
 };
 
+#ifdef UNUSED
+#elif defined(__GNUC__)
+# define UNUSED(x) UNUSED_ ## x __attribute__((unused))
+#elif defined(__LCLINT__)
+# define UNUSED(x) /*@unused@*/ x
+#else
+# define UNUSED(x) x
+#endif
+
 /*    snprintf.c    */
 EXTERN int mat_snprintf(char *str,size_t count,const char *fmt,...);
 EXTERN int mat_asprintf(char **ptr,const char *format, ...);
@@ -98,6 +107,8 @@ EXTERN int ReadSingleData(mat_t *mat,float   *data,enum matio_types data_type,
                int len);
 EXTERN int ReadInt32Data (mat_t *mat,mat_int32_t *data,
                enum matio_types data_type,int len);
+EXTERN int ReadInt64Data(mat_t *mat,mat_int64_t *data,
+               enum matio_types data_type,int len);
 EXTERN int ReadUInt32Data(mat_t *mat,mat_uint32_t *data,
                enum matio_types data_type,int len);
 EXTERN int ReadInt16Data (mat_t *mat,mat_int16_t *data,
@@ -125,6 +136,8 @@ EXTERN int ReadCompressedSingleData(mat_t *mat,z_stream *z,float   *data,
                enum matio_types data_type,int len);
 EXTERN int ReadCompressedInt32Data(mat_t *mat,z_stream *z,mat_int32_t *data,
                enum matio_types data_type,int len);
+EXTERN int ReadCompressedInt64Data(mat_t *mat,z_stream *z,mat_int64_t *data,
+               enum matio_types data_type,int len);
 EXTERN int ReadCompressedUInt32Data(mat_t *mat,z_stream *z,mat_uint32_t *data,
                enum matio_types data_type,int len);
 EXTERN int ReadCompressedInt16Data(mat_t *mat,z_stream *z,mat_int16_t *data,
diff --git a/src/read_data.c b/src/read_data.c
index 0250fcd..53300b1 100644
--- a/src/read_data.c
+++ b/src/read_data.c
@@ -3740,9 +3740,6 @@ ReadDataSlabN(mat_t *mat,void *data,enum matio_classes class_type,
     int inc[10] = {0,}, cnt[10] = {0,}, dimp[10] = {0,};
     size_t data_size;
 
-    int (*read_data_func)(mat_t *mat,void *data,enum matio_types data_type,
-                          int len) = NULL;
-
     if ( (mat   == NULL) || (data   == NULL) || (mat->fp == NULL) ||
          (start == NULL) || (stride == NULL) || (edge    == NULL) ) {
         return -1;
@@ -4655,7 +4652,7 @@ ReadCompressedDataSlabN(mat_t *mat,z_stream *z,void *data,
 {
     int nBytes = 0, i, j, N, I = 0;
     int inc[10] = {0,}, cnt[10] = {0,}, dimp[10] = {0,};
-    z_stream z_copy = {0,};
+    z_stream z_copy;
 
     if ( (mat   == NULL) || (data   == NULL) || (mat->fp == NULL) ||
          (start == NULL) || (stride == NULL) || (edge    == NULL) ) {
@@ -5999,7 +5996,7 @@ ReadCompressedDataSlab1(mat_t *mat,z_stream *z,void *data,
     int stride,int edge)
 {   
     int nBytes = 0, data_size, i, err;
-    z_stream z_copy = {0,};
+    z_stream z_copy;
     
     if ( (mat   == NULL) || (data   == NULL) || (mat->fp == NULL) )
         return 0;
@@ -6169,7 +6166,7 @@ ReadCompressedDataSlab2(mat_t *mat,z_stream *z,void *data,
 {
     int nBytes = 0, data_size, i, j, err;
     int pos, row_stride, col_stride;
-    z_stream z_copy = {0,};
+    z_stream z_copy;
 
     if ( (mat   == NULL) || (data   == NULL) || (mat->fp == NULL) ||
          (start == NULL) || (stride == NULL) || (edge    == NULL) ) {
diff --git a/src/snprintf.c b/src/snprintf.c
index 3bfe0ba..879fc4a 100644
--- a/src/snprintf.c
+++ b/src/snprintf.c
@@ -87,6 +87,7 @@
  *    if the C library has some snprintf functions already.
  =============================================================*/
 
+#define _GNU_SOURCE
 #include "matioConfig.h"
 #if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
 #include <string.h>
@@ -103,6 +104,9 @@
 #if defined(HAVE_STDLIB_H) || defined(STDC_HEADERS)
 #include <stdlib.h>
 #endif
+#if defined(HAVE_MALLOC_H)
+#include <malloc.h>
+#endif
 #include <stdio.h>
 
 #ifdef HAVE_LONG_DOUBLE
@@ -167,7 +171,7 @@
 static size_t dopr(char *buffer, size_t maxlen, const char *format, 
                    va_list args_in);
 static void fmtstr(char *buffer, size_t *currlen, size_t maxlen,
-                    char *value, int flags, int min, int max);
+                   const char *value, int flags, int min, int max);
 static void fmtint(char *buffer, size_t *currlen, size_t maxlen,
                     long value, int base, int min, int max, int flags);
 static void fmtfp(char *buffer, size_t *currlen, size_t maxlen,
@@ -179,7 +183,7 @@ static size_t dopr(char *buffer, size_t maxlen, const char *format, va_list args
         char ch;
         LLONG value;
         LDOUBLE fvalue;
-        char *strvalue;
+        const char *strvalue;
         int min;
         int max;
         int state;
@@ -438,7 +442,7 @@ static size_t dopr(char *buffer, size_t maxlen, const char *format, va_list args
 }
 
 static void fmtstr(char *buffer, size_t *currlen, size_t maxlen,
-                    char *value, int flags, int min, int max)
+                   const char *value, int flags, int min, int max)
 {
         int padlen, strln;     /* amount to pad */
         int cnt = 0;
diff --git a/test/test_mat.c b/test/test_mat.c
index b51b0ea..5726680 100644
--- a/test/test_mat.c
+++ b/test/test_mat.c
@@ -474,7 +474,7 @@ help_test(const char *test)
     else if ( !strcmp(test,"writesparse") )
         Mat_Help(helptest_writesparse);
     else if ( !strcmp(test,"write_compressed_sparse") )
-        Mat_Help(helptest_writesparse);
+        Mat_Help(helptest_write_compressed_sparse);
     else if ( !strcmp(test,"write_struct") )
         Mat_Help(helptest_write_struct);
     else if ( !strcmp(test,"write_compressed_struct") )
@@ -522,7 +522,7 @@ test_write( void )
     mat_uint64_t ui64[50];
 #endif
     struct ComplexSplit z = {NULL,NULL},s = {NULL,NULL};
-    char *str = "This is a string";
+    const char *str = "This is a string";
     mat_t *mat;
     matvar_t *matvar;
 
@@ -614,7 +614,7 @@ test_write_compressed( void )
 #ifdef HAVE_MAT_UINT64_T
     mat_uint64_t ui64[50];
 #endif
-    char *str = "This is a string";
+    const char *str = "This is a string";
     mat_t *mat;
     matvar_t *matvar;
 
@@ -764,7 +764,7 @@ test_write_struct()
     double  data[50]={0.0,};
     float  fdata[50]={0.0,};
     int    idata[50]={0.0,};
-    char  *str = "This is a string";
+    const char  *str = "This is a string";
     struct ComplexSplit z = {NULL,NULL},s = {NULL,NULL};
     int    err = 0, i;
     mat_t     *mat;
@@ -834,7 +834,7 @@ test_write_compressed_struct()
     double  data[50]={0.0,};
     float  fdata[50]={0.0,};
     int    idata[50]={0.0,};
-    char  *str = "This is a string";
+    const char  *str = "This is a string";
     int    err = 0, i;
     mat_t     *mat;
     matvar_t **matvar, *struct_matvar, *substruct_matvar;
@@ -1155,7 +1155,7 @@ test_get_struct_field(const char *file,const char *structname,
 {
     mat_t *mat;
     matvar_t *matvar, *field;
-    int index = 1, err = 0;
+    int ind = 1, err = 0;
 
     mat = Mat_Open(file,MAT_ACC_RDONLY);
     if ( mat ) {
@@ -1172,8 +1172,8 @@ test_get_struct_field(const char *file,const char *structname,
                 case '7':
                 case '8':
                 case '9':
-                    index = atoi(fieldname);
-                    field = Mat_VarGetStructField(matvar,&index,BY_INDEX,0);
+                    ind = atoi(fieldname);
+                    field = Mat_VarGetStructField(matvar,&ind,BY_INDEX,0);
                     err = (field == NULL) ? 1 : 0;
                     if ( !err )
                         Mat_VarPrint( field, 0);
@@ -1353,7 +1353,7 @@ test_writeinf(void)
 static int
 test_writesparse( void )
 {
-    int    err = 0, i;
+    int    err = 0;
     size_t dims[2] = {5,10};
     double    d[50] = {1,5,7,8,9,11,15,17,18,19,21,25,27,28,29,31,35,37,38,39,
                        41,45,47,48,49};
@@ -1361,7 +1361,7 @@ test_writesparse( void )
     mat_int32_t  jc[11] = {0,2,5,7,10,12,15,17,20,22,25};
     mat_t *mat;
     matvar_t *matvar;
-    sparse_t  sparse = {0,};
+    sparse_t  sparse;
 
     sparse.nzmax = 25;
     sparse.nir   = 25;
@@ -1392,7 +1392,7 @@ test_writesparse( void )
 static int
 test_write_compressed_sparse( void )
 {
-    int    err = 0, i;
+    int    err = 0;
     size_t dims[2] = {5,10};
     double    d[50] = {1,5,7,8,9,11,15,17,18,19,21,25,27,28,29,31,35,37,38,39,
                        41,45,47,48,49};
@@ -1400,7 +1400,7 @@ test_write_compressed_sparse( void )
     mat_int32_t  jc[11] = {0,2,5,7,10,12,15,17,20,22,25};
     mat_t *mat;
     matvar_t *matvar;
-    sparse_t  sparse = {0,};
+    sparse_t  sparse;
 
     sparse.nzmax = 25;
     sparse.nir   = 25;
@@ -1448,10 +1448,10 @@ test_delete(char *file,char *name)
 
 int main (int argc, char *argv[])
 {
-    char *prog_name = "test_mat";
+    const char *prog_name = "test_mat";
     int   c,i, k, err = 0, ntests = 0;
     mat_t *mat, *mat2;
-    matvar_t *matvar, *matvar2, *matvar3;
+    matvar_t *matvar;
 
     Mat_LogInit(prog_name);
 
@@ -1603,6 +1603,7 @@ int main (int argc, char *argv[])
             ntests++;
     #if 0
         } else if ( !strcasecmp(argv[1],"cellslab") ) {
+            matvar_t *matvar2, *matvar3;
             matvar_t *cellmatvar, **cellfields;
                 cellfields = malloc(6*sizeof(matvar_t *));
                 cellfields[0] = matvar;
@@ -1670,10 +1671,10 @@ int main (int argc, char *argv[])
             k++;
             ntests++;
         } else if ( !strcasecmp(argv[k],"sub2ind") ) {
-            int  dims[3] = {256,256,124}, index[3] = {233,74,1};
+            int  dims[3] = {256,256,124}, ind[3] = {233,74,1};
             int  linear_index;
 
-            linear_index = Mat_CalcSingleSubscript(3,dims,index);
+            linear_index = Mat_CalcSingleSubscript(3,dims,ind);
             Mat_Message("%d",linear_index);
             k++;
             ntests++;
diff --git a/test/test_snprintf.c b/test/test_snprintf.c
index f589266..9367702 100644
--- a/test/test_snprintf.c
+++ b/test/test_snprintf.c
@@ -1,13 +1,15 @@
 #include <stdlib.h>
 #include <stdio.h>
+#include <string.h>
 #include <math.h>
 #include <matio.h>
+#include <matio_private.h>
 
 int main (void)
 {
         char buf1[1024];
         char buf2[1024];
-        char *fp_fmt[] = {
+        const char *fp_fmt[] = {
                 "%1.1f", 
                 "%-1.5f",
                 "%1.5f",
@@ -28,7 +30,7 @@ int main (void)
         double fp_nums[] = { 6442452944.1234, -1.5, 134.21, 91340.2, 341.1234, 203.9, 0.96, 0.996, 
                              0.9996, 1.996, 4.136, 5.030201, 0.00205,
                              /* END LIST */ 0};
-        char *int_fmt[] = {
+        const char *int_fmt[] = {
                 "%-1.5d", 
                 "%1.5d",
                 "%123.9d",
@@ -42,7 +44,7 @@ int main (void)
                 NULL
         };
         long int_nums[] = { -1, 134, 91340, 341, 0203, 0};
-        char *str_fmt[] = {
+        const char *str_fmt[] = {
                 "10.5s",
                 "5.10s",
                 "10.1s",
@@ -55,7 +57,7 @@ int main (void)
                 "%10s",
                 NULL
         };
-        char *str_vals[] = {"hello", "a", "", "a longer string", NULL};
+        const char *str_vals[] = {"hello", "a", "", "a longer string", NULL};
         int x, y;
         int fail = 0;
         int num = 0;
-- 
1.7.2.1

